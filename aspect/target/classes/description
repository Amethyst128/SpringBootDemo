Spring AOP 探索：

@EnableAspectJAutoProxy 注解原理----研究一下
@EnableAspectJAutoProxy(proxyTargetClass=ture) 表示强制使用 cglib动态代理；


execution表达式的写法：
任意公共方法的执行：
  execution(public * (…))
任何一个以“set”开始的方法的执行：
  execution( set*(…))
AccountService 接口的任意方法的执行：
  execution(* com.xyz.service.AccountService.(…))
定义在service包里的任意方法的执行：
  execution( com.xyz.service..(…))
定义在service包和所有子包里的任意类的任意方法的执行：
  execution(* com.xyz.service….(…))
定义在pointcutexp包和所有子包里的JoinPointObjP2类的任意方法的执行：
  execution(com.test.spring.aop.pointcutexp…JoinPointObjP2.(…))")
  最靠近(…)的为方法名,靠近.(…))的为类名或者接口名,如上例的JoinPointObjP2.(…))
pointcutexp包里的任意类.
  within(com.test.spring.aop.pointcutexp.)
pointcutexp包和所有子包里的任意类.
  within(com.test.spring.aop.pointcutexp…)
实现了Intf接口的所有类,如果Intf不是接口,限定Intf单个类.
  this(com.test.spring.aop.pointcutexp.Intf)
  当一个实现了接口的类被AOP的时候,用getBean方法必须cast为接口类型不能为该类的类型.
带有@Transactional标注的所有类的任意方法.
  @within(org.springframework.transaction.annotation.Transactional)
  @target(org.springframework.transaction.annotation.Transactional)
带有@Transactional标注的任意方法.
  @annotation(org.springframework.transaction.annotation.Transactional)
  @within和@target针对类的注解,@annotation是针对方法的注解
参数带有@Transactional标注的方法.
  @args(org.springframework.transaction.annotation.Transactional) 参数为String类型(运行是决定)的方法.
  args(String)


拦截注解的执行顺序  around---after--afterReturning
@Around(切入点)  要执行业务 通过参数ProceedingJoinPoint.proceed()


AOP切面实现的几个步骤：
1. 添加aop的maven依赖
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
2. 定义一个aop切面类
    @Aspect 注解该类是一个切面Bean
    然后定义切点 pointCut()
    以及切点的执行时机  @Around(execution())[ProceedingJoinPoint.proceed()] \ @After \ @AfterReturning  \ @AfterThrowing



下面是我的简要总结AOP：
AOP的底层实际上是动态代理，动态代理分成了JDK动态代理和CGLib动态代理。如果被代理对象没有接口，那么就使用的是CGLIB代理(也可以直接配置使用CBLib代理)
如果是单例的话，那我们最好使用CGLib代理，因为CGLib代理对象运行速度要比JDK的代理对象要快
AOP既然是基于动态代理的，那么它只能对方法进行拦截，它的层面上是方法级别的
无论经典的方式、注解方式还是XML配置方式使用Spring AOP的原理都是一样的，只不过形式变了而已。一般我们使用注解的方式使用AOP就好了。
注解的方式使用Spring AOP就了解几个切点表达式，几个增强/通知的注解就完事了，是不是贼简单...使用XML的方式和注解其实没有很大的区别，很快就可以上手啦。
引介/引入切面也算是一个比较亮的地方，可以用代理的方式为某个对象实现接口，从而能够使用借口下的方法。这种方式是非侵入式的~
要增强的方法还可以接收与被代理方法一样的参数、绑定被代理方法的返回值这些功能...


aop的底层源码：
（一）俩步骤  1。 动态解析aop标签；   2。 创建aop代理；
（二）源码解析：


http://www.justdojava.com/2019/07/17/spring-analysis-note-8/
动态代理的含义：抽象类在编译期间是未确定具体实现子类，在运行时才生成最终对象。
AopNamespaceHandler处理器 extends NamespaceHandlerSupport  implements NamespaceHandler
AopNamespaceHandler处理器继承自NamespaceHandlerSupport，在加载的过程中，会调用AopNamespaceHandler处理器重写的init方法，
这里会注册一个aspectj-autoproxy 类型的解析器 AspectJAutoProxyBeanDefinitionParser。
重点就在注册解析器这里：
    代码：

    public static void registerAspectJAnnotationAutoProxyCreatorIfNecessary(
        ParserContext parserContext, Element sourceElement) {
        BeanDefinition beanDefinition = AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(
                parserContext.getRegistry(), parserContext.extractSource(sourceElement));
        useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);
        registerComponentIfNecessary(beanDefinition, parserContext);
	}

	private static void useClassProxyingIfNecessary(BeanDefinitionRegistry registry, @Nullable Element sourceElement) {
		if (sourceElement != null) {
			boolean proxyTargetClass = Boolean.parseBoolean(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));
			if (proxyTargetClass) {
				AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);
			}
			boolean exposeProxy = Boolean.parseBoolean(sourceElement.getAttribute(EXPOSE_PROXY_ATTRIBUTE));
			if (exposeProxy) {
				AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);
			}
		}
	}

	private static void registerComponentIfNecessary(@Nullable BeanDefinition beanDefinition, ParserContext parserContext) {
		if (beanDefinition != null) {
			parserContext.registerComponent(
					new BeanComponentDefinition(beanDefinition, AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME));
		}
	}

    1 注册AnnotationAwareAspectJAutoProxyCreator
        1 registerAspectJAnnotationAutoProxyCreatorIfNecessary()  通过工具类，注册或升级 AspectJAnnotationAutoProxyCreator
            对于 AOP 的实现，基本上都是靠 AnnotationAwareAspectJAutoProxyCreator去完成，它可以根据 @Point 注解定义的切点来自动代理相匹配的bean。
            （这里的业务太复杂了，跳过）
        2 useClassProxyingIfNecessary()  处理 proxy-target-class 以及 expose-proxy 属性
            解析参数中Element中的两个属性   "proxy-target-class" 和 "expose-proxy" ，如果是 true，
            将它们加入代理注册器的属性列表中
            AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry); 处理  proxy-target-class 属性，之后决定用CGLIB代理还是JDK；
                如果  proxy-target-class 属性为true，则强制使用CGLIB动态代理；  默认为JDK，或者如果实现了接口，也使用JDK；
                （但是这里有个问题就是，cglib是不能增强final修饰的类的；）
            AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry); 处理 expose-proxy 属性；
                有时候目标对象内部的自我调用将无法实施切面中的增强。  如果 expose-proxy 属性为true的话，则可以同时增强，例如：Spring内部俩方法调用，但是俩方法的事务类型级别不一样；
        3 registerComponentIfNecessary  注册组件并通知，让监听器进行处理
    2 对注解中子类的处理




https://blog.csdn.net/u012152619/article/details/78756735
    AspectJ是一个静态织入的思想，它有专门的编译器，将Advice以字节码的形式织入到class文件中。
    Spring AOP采用的动态织入，利用其强大的动态代理功能，在程序运行期间将Advice 织入到Jointpoint；

    Spring 允许使用 AspectJAnnotation 用于定义切面（Aspect）、切入点（Pointcut）和通知（Advice），
    Spring 框架则可识别并根据这些Annotation 来生成 AOP 代理。Spring 只是使用了和AspectJ 一样的注解，但并没有使用AspectJ
    的编译器或者织入器（Weaver），底层依然使用的是 Spring AOP，依然是在运行时动态生成AOP 代理，并不依赖于AspectJ 的编译器或者织入器。

    简单地说，Spring 依然采用运行时生成动态代理的方式来增强目标对象，所以它不需要增加额外的编译，也不需要 AspectJ 的织入器支持；
    而AspectJ 在采用编译时增强，所以AspectJ 需要使用自己的编译器来编译Java 文件，还需要织入器。
总结：这里有三个概念：
1 SpringAOP
2 AspectJ一个独立的切面三方工具，静态织入 （编译时代理）
3 SpringAOP借用和AspectJ一样的注解，Spring识别这些注解来生成AOP代理， （运行时动态代理）
与AspectJ的静态织入不同，Spring AOP的动态织入过程不会对SampleService.class字节码做任何改动，而是将CGLIB生成的动态代理类置于内存当中。



https://www.jianshu.com/p/6402c45cee62
对两种代理源码实现的总结：
    JDK动态代理：
        实现InvocationHandler接口；
        public class JdkProxyFactory implements InvocationHandler {}  JDK代理的工厂类中的构造方法 参数为 当前需要被代理的对象；
        通过 Proxy.newProxyInstance 方法传入类加载器、接口类对象、调用处理器来创建代理类实例
        JDK 中通过 ProxyGenerator.generateProxyClass 方法根据传入接口类对象生成代理类的字节码，并加载字节码产生代理类对象
        生成的代理类继承了 Proxy 实现了传入接口类
        该类每一个方法都会执行调用处理器的 invoke 方法，传入相应参数，返回 invoke 方法的返回值
    cglib动态代理：
        public class CglibProxyFactory implements MethodInterceptor{} CGLIB工厂中的构造方法，传入的是当前被代理的类；
        getProxyObject()方法中，主要通过Enhancer类，enhancer设置superClass为当前对象，即代理对象为当前对象的子类；同时create代理对象；


说说JDK11中 的AOP动态代理的实现：
ProxyFactory---- ProxyCreatorSupport --- DefaultAopProxyFactory -- JdkDynamicAopProxy -- ObjenesisCglibAopProxy

1  ProxyFactory
public class ProxyFactory extends ProxyCreatorSupport {
	public Object getProxy(@Nullable ClassLoader classLoader) {
	    //  这里分为创建proxy 和 通过类加载器 获取proxy两部分操作，第二部getProxy()都会对已经创建的代理对象进行一些其他的设置；
		return createAopProxy().getProxy(classLoader);
	}
}
2  ProxyCreatorSupport
public class ProxyCreatorSupport extends AdvisedSupport {
	protected final synchronized AopProxy createAopProxy() {
		if (!this.active) {
			activate();
		}
		return getAopProxyFactory().createAopProxy(this);
	}
}
3   DefaultAopProxyFactory
public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {

	@Override
	public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {
		if (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {
			Class<?> targetClass = config.getTargetClass();
			if (targetClass == null) {
				throw new AopConfigException("TargetSource cannot determine target class: " +
						"Either an interface or a target is required for proxy creation.");
			}
			if (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {
				return new JdkDynamicAopProxy(config);
			}
			return new ObjenesisCglibAopProxy(config);
		}
		else {
			return new JdkDynamicAopProxy(config);
		}
	}
}
4
如果是JDK动态代理的话：   JdkDynamicAopProxy
final class JdkDynamicAopProxy implements AopProxy, InvocationHandler, Serializable {
	public JdkDynamicAopProxy(AdvisedSupport config) throws AopConfigException {
		Assert.notNull(config, "AdvisedSupport must not be null");
		if (config.getAdvisors().length == 0 && config.getTargetSource() == AdvisedSupport.EMPTY_TARGET_SOURCE) {
			throw new AopConfigException("No advisors and no TargetSource specified");
		}
		this.advised = config;
	}
}
5
如果是CGLIB动态代理的话：   创建代理对象之前，在getProxy()方法中  对Enhancer继续进行一些设置；
class ObjenesisCglibAopProxy extends CglibAopProxy {

	public ObjenesisCglibAopProxy(AdvisedSupport config) {
		super(config);
	}


	@Override
	protected Object createProxyClassAndInstance(Enhancer enhancer, Callback[] callbacks) {
		Class<?> proxyClass = enhancer.createClass();
		Object proxyInstance = null;

		if (objenesis.isWorthTrying()) {
			try {
				proxyInstance = objenesis.newInstance(proxyClass, enhancer.getUseCache());
			}
			catch (Throwable ex) {
				logger.debug("Unable to instantiate proxy using Objenesis, " +
						"falling back to regular proxy construction", ex);
			}
		}

		if (proxyInstance == null) {
			// Regular instantiation via default constructor...
			try {
				Constructor<?> ctor = (this.constructorArgs != null ?
						proxyClass.getDeclaredConstructor(this.constructorArgTypes) :
						proxyClass.getDeclaredConstructor());
				ReflectionUtils.makeAccessible(ctor);
				proxyInstance = (this.constructorArgs != null ?
						ctor.newInstance(this.constructorArgs) : ctor.newInstance());
			}
			catch (Throwable ex) {
				throw new AopConfigException("Unable to instantiate proxy using Objenesis, " +
						"and regular proxy instantiation via default constructor fails as well", ex);
			}
		}

		((Factory) proxyInstance).setCallbacks(callbacks);
		return proxyInstance;
	}
}

上面的五个步骤就是代理的核心代理了，java 会找到所有符合代理条件的代理对象，同时加载aspect中定义的advise的所有方法，
生成代理类之后，才会去执行增强方法和业务逻辑；









