# Spring线程池的使用：
org.springframework.scheduling.concurrent 包下的 ThreadPoolTaskExecutor类，底层实现封装ExecutorService；
【JUC包下的Executor的实现四种线程池的方式，底层都是通过创建ThreadPoolExecutor】


# java的四种线程池：
- newFixedThreadPool(int Threads)：创建固定数目线程的线程池。
- newCachedThreadPool()：创建一个可缓存的线程池，调用execute 将重用以前构造的线程（如果线程可用）。如果没有可用的线程，则创建一个新线程并添加到池中。终止并从缓存中移除那些已有 60 秒钟未被使用的线程。
- newSingleThreadExecutor()创建一个单线程化的Executor。
- newScheduledThreadPool(int corePoolSize)创建一个支持定时及周期性的任务执行的线程池，多数情况下可用来替代Timer类。ScheduledThreadPoolExecutor 继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。

四种线程池的实现源码：
 public static ExecutorService newCachedThreadPool(ThreadFactory threadFactory) {
         return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue<Runnable>(), threadFactory); }
 public static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory) {
         return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), threadFactory)); }
 public static ExecutorService newFixedThreadPool(int nThreads, ThreadFactory threadFactory) {
         return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(), threadFactory); }
 public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
        return new ScheduledThreadPoolExecutor(corePoolSize); }
 四个线程池的创建，使用ThreadPoolExecutor 或者 ScheduledThreadPoolExecutor，返回都是ExecutorService类型；

 四种线程池对应的阻塞队列和最大线程数：
 newCachedThreadPool --- SynchronousQueue<Runnable>() --- Integer.MAX_VALUE
 newScheduledThreadPool ----  DelayedWorkQueue() --- Integer.MAX_VALUE
 newFixedThreadPool --- LinkedBlockingQueue<Runnable>()) --- int nThreads
 newSingleThreadExecutor --- LinkedBlockingQueue<Runnable>())) --- 1
通过上面的整理，得出 “不推荐直接这样创建线程池的原因”：
newFixedThreadPool + newSingleThreadExecutor
允许的请求队列的长度为默认的 Integer.MAX_VALUE;可能导致大量的线程堆积，造成OOM；
newCachedThreadPool + newScheduledThreadPool
允许的创建的最大线程数为默认的 Integer.MAX_VALUE;可能创建大量的线程，导致OOM；

解析一下 java线程池中的阻塞队列的实现：
Java中的BlockingQueue主要有两种实现，分别是ArrayBlockingQueue 和 LinkedBlockingQueue 和 SynchronousQueue
其中：
SynchronousQueue 直接提交策略；
ArrayBlockingQueue  无界队列策略  是一个用数组实现的有界阻塞队列，必须设置容量。
LinkedBlockingQueue  有界队列策略  是一个用链表实现的有界阻塞队列，容量可以选择进行设置，不设置的话，将是一个无边界的阻塞队列，最大长度为Integer.MAX_VALUE。而newFixedThreadPool中创建LinkedBlockingQueue时，并未指定容量。

解决Executor问题的方案：
避免使用默认的创建线程池的方式，就可以避免OOM，这里有两种避免方式：
（1）直接使用JUC包下的ThreadPoolExecutor()的构造函数，去自定义参数，防止OOM； 避免资源耗尽的风险；
（2）通过Spring封装的  org.springframework.scheduling.concurrent 包下的 ThreadPoolTaskExecutor类去创建，内部还是封装了ExecutorService的实现；


# 在SpringBoot中实现多线程或者异步的方式有哪些：
（1）通过配置文件配置线程池； 直接注入线程池 executor.execute()-> 进行异步执行；
（2）通过javaConfig的形式创建线程池；  直接注入线程池进行异步执行；
（3）通过@EnableAsync打开可异步执行的方式，使用@Async注解方法，并指定异步执行的线程池，如果没有指定线程池，则使用默认的线程池；
    注入被@Async注解的方法所在类，然后通过类直接调用异步执行的方法；

# 多线程的几种实现方式：
(1) new thread();
(2) 实现Runnable接口；
(3) 实现CallAble接口；
(4) 使用线程池；


# 为什么在多线程情况下会有并发问题：
（1）涉及到 java内存模型：因为每个线程都有自己的工作内存，存储主内存中变量的副本，工作内存中的写操作的值不会立马同步到主内存，而别的线程也不能访问自己的工作内存，所以会出现同一个变量在不同的线程中的值不一致的情况，即并发问题；
（2）并发三要素： 原子性、一致性、有序性；
（3）如何解决并发问题：
    - volatile （只能保证一致性和有序性）
    - Synchronized
（4）高并发下，Synchronized、ReentranLock 效率低，因为同一时刻只有一个线程能进入同步代码块，如果同时有很多线程访问，那么其它线程就都在等待锁。这个时候可以使用并发包下的数据结构，例如ConcurrentHashMap，LinkBlockingQueue，以及原子性的数据结构如：AtomicInteger。



# demo中的一些点：
1. 自定义的线程池 xTaskExecutor，当配置文件中配置了值，会覆盖javaConfig中的默认值；
   配置文件中 根据线程池的名称和bean中的名称匹配。  比如如果xTaskExecutor的线程池名称为thread.pool.test,那么在application.yml中关于线程池的配置就要改为：thread:pool:test:
2. 需求：等待子线程执行完才能执行主线程
   的实现有三种：CountDownLatch 信号量、CyclicBarrier 同步屏障、join() 同步执行.
